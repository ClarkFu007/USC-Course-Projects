Name: Yao Fu
USC NetID: yaof
CSCI 455 PA4
Spring 2021

----------------------------------------------
CERTIFY IT'S YOUR WORK

"I certify that the work submitted for this assignment does not
violate USC's student conduct code.  In particular, the work is my
own, not a collaboration, and does not involve code created by other
people, except for the the resources explicitly mentioned in the CS 455
Course Syllabus.  And I did not share my solution or parts of it with
other students in the course."

Initial below to "sign" the above statement:

Yao Fu

----------------------------------------------
ACKNOWLEDGE ANY OUTSIDE SOURCES

List here any code you submitted for this assignment that was written
with significant help of a course staff member, or code used from the
textbook.  Be specific about what methods or algorithms are involved,
and what sections of the textbook are involved (if applicable): [you do
not need to list any of the code that we wrote for the assignment,
i.e., the contents of the starter files for the assignment]

The professor wrote the code (static method allSubsets in Rack.java)
in order to finding all subsets of a multiset.

----------------------------------------------
KNOWN BUGS or LIMITATIONS:

All the test and extra files provided can be run successfully.

----------------------------------------------
DESCRIPTION OF YOUR CLASS DESIGN AND ALGORITHMS AND DATA STRUCTURES USED:

1: In the "AnagramDictionary" class, I use the data structure "ArrayList<String>"
to store the words of the given dictionary. Then I use the data structure "HashMap<String, String>"
to store the (key, value) pairs where keys are words in the dictionary and values are sorted versions
of the relevant key words. For the "getAnagramsOf" method, use a single loop, if the given string's
sorted version is the same as values of some entries of the HashMap, then those key words are anagrams
of the given string.

2: In the "Rack" class, I use the data structure "ArrayList<String>" store all subsets of the given
string. In order to use the static function "allSubsets" provided, I creat a "RackInfor" class,
which is to collect the information of rack (unique letters of rack and multiplicity of every unique letter).

3: In the "ScoreTable" class, just use several "if" statements to calculate the score of the given string.

4: In the "DataReader" class, just use the data structure "ArrayList<String>" to get data of the file.

5: In the "WordFinder" class, first I use the data structure "TreeMap<String, Integer>" to store words
and their relevant scores. Then I use the data structure "ArrayList<Map.Entry<String, Integer>>" to store
every entry of that TreeMap. Finally I use "MapComparator", which implements "Comparator", to sort that
ArrayList and then get the final results of the format:
      for (Map.Entry<String, Integer> resultEntry : resultList) {
         System.out.println(resultEntry.getValue() + ": " + resultEntry.getKey());
      }

----------------------------------------------
ANY OTHER NOTES FOR THE GRADER:

Feel free to ask my any questions.





